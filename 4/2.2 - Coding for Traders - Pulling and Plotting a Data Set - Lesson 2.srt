1
00:00:00,000 --> 00:00:02,160
Welcome to part two in our R course,

2
00:00:02,360 --> 00:00:06,480
so what we're going to be looking at today is something very exciting.

3
00:00:06,580 --> 00:00:09,620
We're going to be pulling stock data from the internet,

4
00:00:09,880 --> 00:00:13,360
so this is a very exciting time for me when I was first able to do this.

5
00:00:14,820 --> 00:00:17,800
Something that I want to talk about first from the last video is that when we say,

6
00:00:17,900 --> 00:00:20,720
for example, x equals 10,

7
00:00:22,340 --> 00:00:29,060
what we're doing is we're saying this variable becomes 10. So we press enter,

8
00:00:29,340 --> 00:00:36,560
and now when we look at our global environment, x is 10.

9
00:00:36,900 --> 00:00:41,300
We could have said y equals 10. Now y equals 10, right?

10
00:00:41,480 --> 00:00:44,460
So we're just saying that when we call this variable now,

11
00:00:45,740 --> 00:00:48,760
when we print out y to the console, it's now 10.

12
00:00:48,880 --> 00:00:52,260
And we print out x to the console, it's now 10. We can name this anything.

13
00:00:52,260 --> 00:01:01,020
We could say, let's call it hey there equals 20.

14
00:01:01,840 --> 00:01:03,220
And now when we call hey there,

15
00:01:06,560 --> 00:01:10,980
we get the number 20. And remember, capitals do make a difference.

16
00:01:11,520 --> 00:01:13,540
The first thing we need to understand is what a vector is.

17
00:01:13,880 --> 00:01:17,660
So a vector is just multiple numbers, right? So x equals,

18
00:01:18,360 --> 00:01:25,460
you have to use the word C. C creates a vector. C, so C 10, 20, 30.

19
00:01:25,860 --> 00:01:32,120
We call x now, we print x in the console, and we get 10, 20, 30. If we go,

20
00:01:32,380 --> 00:01:36,480
if we do x times 2, we get 20, 40, 60.

21
00:01:36,640 --> 00:01:40,620
So what happened was 2 is multiplied by each number in the vector.

22
00:01:41,120 --> 00:01:43,340
So they say R is built on the shoulders of giants,

23
00:01:43,580 --> 00:01:46,560
and that is because you can have access to people like Jeffrey Ryan,

24
00:01:46,680 --> 00:01:51,940
who's at Citadel, who creates functions and packages that we can actually use.

25
00:01:52,880 --> 00:01:57,220
So what a package is, is a bunch of functions. So for example, if we say sum,

26
00:01:58,030 --> 00:02:03,750
sum, and our variable x that we have here, what do you think we should get?

27
00:02:03,790 --> 00:02:09,450
We should have 10 plus 20 plus 30. So that's going to be 60. So sum x,

28
00:02:09,570 --> 00:02:14,560
and we get 60. So this sum is a function, right? It takes an input,

29
00:02:15,040 --> 00:02:19,660
and then it gives us an output. So a package is a bunch of functions.

30
00:02:20,460 --> 00:02:26,220
So let me show you an example. Let's say we look for the function getSymbols,

31
00:02:26,840 --> 00:02:28,980
okay? There's nothing there.

32
00:02:29,060 --> 00:02:32,160
So RStudio is going to automatically start looking for the functions that we're

33
00:02:32,160 --> 00:02:36,840
looking for, and we don't have anything. But now we're going to do something,

34
00:02:37,040 --> 00:02:39,480
we're going to install a package. So install packages,

35
00:02:40,160 --> 00:02:46,850
and we're going to install QuantMod, okay? So this is built by Citadel Quant.

36
00:02:49,480 --> 00:02:52,200
So once we install the package, we're going to...

37
00:02:52,200 --> 00:02:54,780
So this means that all the functions now are in your computer,

38
00:02:54,940 --> 00:03:00,360
but you need to bring them into R. So the way we do that is we go library,

39
00:03:00,940 --> 00:03:06,410
and we go QuantMod, okay? And so we have to do quotes here,

40
00:03:07,250 --> 00:03:13,130
but we don't need to do quotes here. So now if we say, for example, getSymbols,

41
00:03:13,310 --> 00:03:17,930
it's right here. It's in the QuantMod package, getSymbols, right?

42
00:03:18,310 --> 00:03:24,650
So we can hit that, and we're going to pull in our first equity.

43
00:03:25,350 --> 00:03:27,870
So we're going to pull in the SPY. Now guys,

44
00:03:28,130 --> 00:03:32,110
something you need to understand is when you put something in quotes,

45
00:03:32,230 --> 00:03:36,950
it becomes a character, okay? So you can do class,

46
00:03:37,530 --> 00:03:45,330
class tells us what type is this. So character. Character. If we go class, 10,

47
00:03:45,570 --> 00:03:48,150
or let's say SPY, we're going to get an error.

48
00:03:48,830 --> 00:03:51,630
And why are we going to get an error? Because SPY,

49
00:03:52,810 --> 00:03:57,630
there's no variable called SPY. It'll only be a variable if we did like this.

50
00:03:58,590 --> 00:04:02,900
SPY, so let's actually run this first. Object SPY not found.

51
00:04:03,300 --> 00:04:06,760
If we did SPY equals 10, right,

52
00:04:07,080 --> 00:04:08,820
what do you think the class is going to be here?

53
00:04:10,140 --> 00:04:13,420
It's going to be something called numeric, right? 10.

54
00:04:16,210 --> 00:04:21,940
10 is numeric. Okay. So now that we got that out of the way,

55
00:04:22,380 --> 00:04:26,120
so there's a few classes, right? We have list, character.

56
00:04:29,730 --> 00:04:32,930
So let us, so getSymbols is going to take a character.

57
00:04:33,450 --> 00:04:36,810
So we're going to put in SPY, boom.

58
00:04:39,640 --> 00:04:42,840
So now all of a sudden in our environment, we have SPY.

59
00:04:42,900 --> 00:04:45,980
Let's take a look at it. Look at this. From 2007, we have the open, high, low,

60
00:04:46,080 --> 00:04:50,180
close, volume, adjusted, all in one second. So now that we have that,

61
00:04:50,480 --> 00:04:58,010
we are going to, we now want to plot it, right? So let's plot SPY, okay?

62
00:04:58,090 --> 00:05:01,430
So plot's a function. We're going to plot it. And now we're going to call.

63
00:05:01,730 --> 00:05:07,250
So here's SPY. We want to call, we want to say get, select, right?

64
00:05:07,310 --> 00:05:13,440
So this dollar sign is the select, okay? So go to SPY, select.

65
00:05:14,950 --> 00:05:20,570
We're going to select, we'll call it, let's do the close. SPY close.

66
00:05:20,850 --> 00:05:26,090
So SPY.close. That's what it is. So SPY.close, there it is.

67
00:05:27,010 --> 00:05:27,950
And let's plot that.

68
00:05:31,940 --> 00:05:37,650
And look at that. There is our SPY chart, right?

69
00:05:38,090 --> 00:05:44,970
We can change the color to red, all right? You can change it to blue, green,

70
00:05:45,050 --> 00:05:51,070
yellow. If you guys want to do one of the charts that we do in our tools,

71
00:05:51,310 --> 00:05:54,010
you have to load in this package called library high chart.

72
00:05:56,960 --> 00:06:00,740
So we're going to plot it using the high chart package. Now remember,

73
00:06:00,880 --> 00:06:05,400
everything is open source. Everything is online. So we can go online here,

74
00:06:06,330 --> 00:06:10,390
type in high charter, type in this URL, it'll bring you to this.

75
00:06:10,550 --> 00:06:15,710
So this is going to be all about the package now. We can go to high stock.

76
00:06:18,240 --> 00:06:21,080
And if we want to plot this right here, I'm going to show the code.

77
00:06:22,540 --> 00:06:30,860
So all we're doing is H chart and then our symbol. So H chart, SPY.

78
00:06:33,470 --> 00:06:38,860
And there we have it. All right, so now we can play around with this.

79
00:06:40,560 --> 00:06:45,020
It automatically goes from daily to weekly when you start getting bigger.

80
00:06:45,900 --> 00:06:46,580
It's really cool.

81
00:06:46,880 --> 00:06:52,360
So that's how we plot data and pull data from the internet for these stocks.

82
00:06:52,700 --> 00:06:57,000
And in future videos, we'll get into web scraping, we'll get into forecasting,

83
00:06:57,240 --> 00:07:02,240
we'll get into backtesting. But you can see how easy it is to just, you know,

84
00:07:02,940 --> 00:07:08,840
these simple functions can really give us a lot of insight and can help us a lot

85
00:07:08,840 --> 00:07:10,820
in our modeling and pulling data.

86
00:07:11,380 --> 00:07:18,030
So that is a quick synopsis of plotting and pulling data in ForR.
